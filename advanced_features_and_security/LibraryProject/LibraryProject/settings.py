"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@1r+28m^t&m#d_q+6)e8z&k3s)b7=l!^9#_g+9h%1p=h7j$7i!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# -------------------------------------
# Step 1: Configure Django for HTTPS Support
# -------------------------------------

# Enforces the use of HTTPS for all requests by redirecting non-HTTPS to HTTPS.
# This should be set to True in production.
SECURE_SSL_REDIRECT = True

# Enables HTTP Strict Transport Security (HSTS). This header tells browsers
# to only connect to your site using HTTPS for a specified duration.
# Setting it for one year (31536000 seconds) is a common best practice.
SECURE_HSTS_SECONDS = 31536000

# Includes all subdomains in the HSTS policy.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# Allows your domain to be included in the HSTS preload list, a list
# of sites hardcoded into major browsers to only use HTTPS.
SECURE_HSTS_PRELOAD = True

# -------------------------------------
# Step 2: Enforce Secure Cookies
# -------------------------------------

# Ensures that session cookies are only sent over a secure (HTTPS) connection.
SESSION_COOKIE_SECURE = True

# Ensures that CSRF cookies are only sent over a secure (HTTPS) connection.
CSRF_COOKIE_SECURE = True

# -------------------------------------
# Step 3: Implement Secure Headers
# -------------------------------------

# Prevents the site from being loaded in an iframe, protecting against clickjacking attacks.
X_FRAME_OPTIONS = 'DENY'

# Prevents browsers from MIME-sniffing the content type, forcing them to
# rely on the Content-Type header. This prevents an attacker from
# uploading a malicious file and having it executed as a different type.
SECURE_CONTENT_TYPE_NOSNIFF = True

# Enables the browser's built-in XSS filter. Note: This is an older header and
# modern browsers have more robust protection, but it's a good practice to include.
SECURE_BROWSER_XSS_FILTER = True

# Set `SECURE_PROXY_SSL_HEADER` if your app is behind a reverse proxy (e.g., Nginx, Apache).
# This tells Django that requests coming from the proxy are secure.
# For example, if using a standard proxy setup:
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
