"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@1r+28m^t&m#d_q+6)e8z&k3s)b7=l!^9#_g+9h%1p=h7j$7i!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- SECURITY ENHANCEMENTS ---

# Step 1: Configure Secure Settings
# Ensure DEBUG is False in a production environment. This prevents sensitive information
# from being exposed to the user in case of an error.
DEBUG = False

# Protect against Cross-Site Scripting (XSS) and other attacks.
# These headers instruct modern browsers to enforce security measures.
# X_FRAME_OPTIONS prevents clickjacking by ensuring your site cannot be embedded in an iframe.
# SECURE_BROWSER_XSS_FILTER enables the browser's XSS filter.
# SECURE_CONTENT_TYPE_NOSNIFF prevents the browser from trying to guess content types,
# which can mitigate some XSS attacks.
X_FRAME_OPTIONS = 'DENY'
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

# Enforce secure cookies. These settings ensure that CSRF and Session cookies
# are only sent over HTTPS connections, protecting them from eavesdropping.
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Enforce HTTPS connections by redirecting all HTTP requests to HTTPS.
# This requires your server to be configured to handle HTTPS.
SECURE_SSL_REDIRECT = True
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# For Content Security Policy (CSP), a common approach is to use a dedicated package
# like `django-csp`. This example shows how to add a simple CSP header manually
# which allows content from your own domain only.
# In a real-world scenario, you would list trusted domains.
# To use this, you'd need to install the package and add it to your INSTALLED_APPS and MIDDLEWARE.
# For now, we'll just set up the header.
# This is a very restrictive policy. Adjust as needed.
CSP_DEFAULT_SRC = ("'self'",)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net")
CSP_SCRIPT_SRC = ("'self'", "https://cdn.jsdelivr.net")

# This is an example of how to manually add a CSP header.
# A full implementation would likely use middleware.
# The code below is not functional on its own in settings.py, but serves as a comment
# for a common manual implementation approach.
"""
from django.http import HttpResponse

def my_view(request):
    response = HttpResponse("Hello, World!")
    response['Content-Security-Policy'] = "default-src 'self';"
    return response
"""
